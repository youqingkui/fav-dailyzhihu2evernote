// Generated by CoffeeScript 1.8.0
(function() {
  var Evernote, GetArticle, SaveEvernote, async, cheerio, crypto, makeNote, request, txErr,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  request = require('request');

  async = require('async');

  txErr = require('./txErr');

  cheerio = require('cheerio');

  Evernote = require('evernote').Evernote;

  crypto = require('crypto');

  makeNote = require('./createNote');

  GetArticle = (function() {
    function GetArticle(id) {
      this.id = id;
      this.headers = {
        'User-Agent': 'osee2unifiedRelease/332 CFNetwork/711.3.18 Darwin/14.0.0',
        'Authorization': 'oauth 5774b305d2ae4469a2c9258956ea49',
        'Content-Type': 'application/json'
      };
      this.title = '';
      this.sourceUrl = '';
      this.content = '';
    }

    GetArticle.prototype.getInfo = function(cb) {
      var op, self;
      self = this;
      op = {
        url: 'http://news-at.zhihu.com/api/4/story/' + self.id,
        headers: self.headers
      };
      return request.get(op, function(err, res, body) {
        var data;
        if (err) {
          return txErr(op.url, 1, {
            err: err,
            fun: 'getInfo'
          }, cb);
        }
        data = JSON.parse(body);
        self.title = data.title;
        self.sourceUrl = data.share_url;
        self.content = data.body;
        return cb();
      });
    };

    return GetArticle;

  })();

  SaveEvernote = (function(_super) {
    __extends(SaveEvernote, _super);

    function SaveEvernote(id, noteStore, noteBook) {
      this.noteStore = noteStore;
      this.noteBook = noteBook;
      this.resourceArr = [];
      SaveEvernote.__super__.constructor.call(this, id);
    }

    SaveEvernote.prototype.createNote = function(cb) {
      var self;
      self = this;
      return makeNote(this.noteStore, this.title, this.tagArr, this.enContent, this.sourceUrl, this.resourceArr, this.created, this.updated, this.noteBook, function(err, note) {
        if (err) {
          if (err) {
            return txErr(self.url, 3, {
              err: err,
              title: self.title
            }, cb);
          }
        }
        console.log("+++++++++++++++++++++++");
        console.log("" + note.title + " create ok");
        console.log("+++++++++++++++++++++++");
        return cb();
      });
    };

    SaveEvernote.prototype.changeContent = function(cb) {
      var $, imgs, self;
      self = this;
      $ = cheerio.load(self.content, {
        decodeEntities: false
      });
      $("*").map(function(i, elem) {
        var k, v, _ref, _results;
        _ref = elem.attribs;
        _results = [];
        for (k in _ref) {
          v = _ref[k];
          if (k !== 'data-actualsrc' && k !== 'src' && k !== 'href' && k !== 'style') {
            $(this).removeAttr(k);
          }
          if (k === 'href') {
            if (!self.checkUrl(v)) {
              _results.push($(this).removeAttr(k));
            } else {
              _results.push(void 0);
            }
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      });
      imgs = $("img");
      console.log("" + self.title + " find img length => " + imgs.length);
      return async.eachSeries(imgs, function(item, callback) {
        var src;
        src = $(item).attr('data-actualsrc');
        if (!src) {
          src = $(item).attr('src');
        }
        return self.readImgRes(src, function(err, resource) {
          var hexHash, md5, newTag;
          if (err) {
            return txErr(src, 2, {
              err: err,
              title: self.title,
              url: self.url,
              fun: 'changeContent'
            }, cb);
          }
          self.resourceArr.push(resource);
          md5 = crypto.createHash('md5');
          md5.update(resource.image);
          hexHash = md5.digest('hex');
          newTag = "<en-media type=" + resource.mime + " hash=" + hexHash + " />";
          $(item).replaceWith(newTag);
          return callback();
        });
      }, function() {
        console.log("" + self.title + " " + imgs.length + " imgs down ok");
        self.enContent = $.html({
          xmlMode: true,
          decodeEntities: false
        });
        console.log(self.enContent);
        return cb();
      });
    };

    SaveEvernote.prototype.readImgRes = function(imgUrl, cb) {
      var op, self;
      self = this;
      op = self.reqOp(imgUrl);
      op.encoding = 'binary';
      return async.auto({
        readImg: function(callback) {
          return request.get(op, function(err, res, body) {
            var mimeType;
            if (err) {
              return cb(err);
            }
            mimeType = res.headers['content-type'];
            mimeType = mimeType.split(';')[0];
            return callback(null, body, mimeType);
          });
        },
        enImg: [
          'readImg', function(callback, result) {
            var data, hash, image, mimeType, resource;
            mimeType = result.readImg[1];
            image = new Buffer(result.readImg[0], 'binary');
            hash = image.toString('base64');
            data = new Evernote.Data();
            data.size = image.length;
            data.bodyHash = hash;
            data.body = image;
            resource = new Evernote.Resource();
            resource.mime = mimeType;
            resource.data = data;
            resource.image = image;
            return cb(null, resource);
          }
        ]
      });
    };

    SaveEvernote.prototype.reqOp = function(getUrl) {
      var options;
      options = {
        url: getUrl,
        headers: {
          'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/42.0.2311.90 Safari/537.36'
        }
      };
      return options;
    };

    SaveEvernote.prototype.checkUrl = function(href) {
      var re, strRegex;
      strRegex = "^((https|http|ftp|rtsp|mms)?://)";
      +"?(([0-9a-z_!~*'().&=+$%-]+: )?[0-9a-z_!~*'().&=+$%-]+@)?";
      +"(([0-9]{1,3}/.){3}[0-9]{1,3}" + "|";
      +"([0-9a-z_!~*'()-]+/.)*";
      +"([0-9a-z][0-9a-z-]{0,61})?[0-9a-z]/.";
      +"[a-z]{2,6})";
      +"(:[0-9]{1,4})?";
      +"((/?)|";
      +"(/[0-9a-z_!~*'().;?:@&=+$,%#-]+)+/?)$";
      re = new RegExp(strRegex);
      if (re.test(href)) {
        return true;
      } else {
        return false;
      }
    };

    return SaveEvernote;

  })(GetArticle);

  module.exports = SaveEvernote;

}).call(this);

//# sourceMappingURL=getArticle.js.map
