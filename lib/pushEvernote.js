// Generated by CoffeeScript 1.8.0
(function() {
  var Evernote, PushEvernote, Task, async, cheerio, crypto, inlineCss, makeNote, noteStore, request, txErr;

  noteStore = require('./noteStore');

  async = require('async');

  request = require('request');

  Task = require('../models/tasks');

  cheerio = require('cheerio');

  inlineCss = require('inline-css');

  crypto = require('crypto');

  makeNote = require('./makeNote');

  txErr = require('./txErr');

  Evernote = require('evernote').Evernote;

  PushEvernote = (function() {
    function PushEvernote(noteStore, noteBook, url, id, title) {
      this.noteStore = noteStore;
      this.noteBook = noteBook;
      this.url = url;
      this.id = id;
      this.title = title;
      this.resourceArr = [];
    }

    PushEvernote.prototype.pushNote = function(cb) {
      var self;
      self = this;
      return async.series([
        function(callback) {
          return self.changeContent(function(err) {
            if (err) {
              return cb();
            }
            return callback();
          });
        }, function(callback) {
          return self.createNote(function(err) {
            if (err) {
              return cb();
            }
            return callback();
          });
        }, function(callback) {
          return self.changeStatus(function(err) {
            if (err) {
              return cb();
            }
            return cb();
          });
        }
      ]);
    };

    PushEvernote.prototype.createNote = function(cb) {
      var self;
      self = this;
      return makeNote(self.noteStore, self.title, self.enContent, {
        sourceURL: self.url,
        resources: self.resourceArr
      }, function(err, note) {
        if (err) {
          return txErr({
            err: err,
            fun: 'createNote',
            id: self.id
          }, cb(err));
        }
        console.log("##############");
        console.log(note.title + " create ok");
        console.log("##############");
        return cb();
      });
    };

    PushEvernote.prototype.changeStatus = function(cb) {
      var self;
      self = this;
      return async.waterfall([
        function(callback) {
          return Task.findOne({
            id: self.id
          }, function(err, row) {
            if (err) {
              return txErr({
                err: err,
                fun: 'changeStatus',
                id: self.id
              }, cb(err));
            }
            if (!row) {
              return txErr({
                err: 'data not find',
                id: self.id
              }, cb("not find db"));
            }
            return callback(null, row);
          });
        }, function(row, callback) {
          row.status = 1;
          return row.save(function(err, res) {
            if (err) {
              return txErr({
                err: err,
                id: self.id
              }, cb(err));
            }
            return cb();
          });
        }
      ]);
    };

    PushEvernote.prototype.changeContent = function(cb) {
      var self;
      self = this;
      return async.waterfall([
        function(callback) {
          return request.get(self.url, function(err, res, body) {
            if (err) {
              return txErr({
                err: err,
                fun: 'getContent',
                url: self.url
              }, cb(err));
            }
            return callback(null, body);
          });
        }, function(body, callback) {
          return inlineCss(body, {
            url: 'http://daily.zhihu.com'
          }, function(err, html) {
            if (err) {
              return txErr({
                body: body,
                err: err,
                fun: 'changeContent-inlineCss'
              }, cb(err));
            }
            return callback(null, html);
          });
        }, function(html, callback) {
          var $, $cHtml, $contentDiv;
          $ = cheerio.load(html);
          $contentDiv = $("body");
          if ($contentDiv.length === 0) {
            return txErr({
              err: 'not content',
              fun: 'changeContent-cherrio',
              html: html
            }, cb('not content'));
          }
          self.filterZhihu($);
          $cHtml = cheerio.load($contentDiv.html());
          self.filterHtml($cHtml);
          return callback(null, $cHtml);
        }, function($cHtml, callback) {
          return self.changeImgHtml($cHtml, cb);
        }
      ]);
    };

    PushEvernote.prototype.changeImgHtml = function($, cb) {
      var imgs, self;
      self = this;
      imgs = $("img");
      console.log("" + self.title + " find img length => " + imgs.length);
      return async.eachSeries(imgs, function(item, callback) {
        var src, styleAttr;
        src = $(item).attr('src');
        styleAttr = $(item).attr("style");
        styleAttr = "style=" + "'" + styleAttr + "'";
        return self.readImgRes(src, function(err, resource) {
          var hexHash, md5, newTag;
          if (err) {
            return txErr({
              err: err,
              title: self.title,
              url: src,
              fun: 'changeContent-changeImgHtml'
            }, cb(err));
          }
          self.resourceArr.push(resource);
          md5 = crypto.createHash('md5');
          md5.update(resource.image);
          hexHash = md5.digest('hex');
          newTag = ("<en-media type=" + resource.mime + " hash=" + hexHash + " ") + styleAttr + " />";
          $(item).replaceWith(newTag);
          return callback();
        });
      }, function() {
        console.log("" + self.title + " " + imgs.length + " imgs down ok");
        self.enContent = $.html({
          xmlMode: true,
          decodeEntities: true
        });
        return cb();
      });
    };

    PushEvernote.prototype.filterZhihu = function($) {
      var bottom_wrap, global_header, header_for_mobile, qr;
      global_header = $("body > div.global-header")[0];
      qr = $("div.main-wrap.content-wrap > div.qr")[0];
      header_for_mobile = $("body > .header-for-mobile")[0];
      bottom_wrap = $("body > div.bottom-wrap")[0];
      $(global_header).remove();
      $(qr).remove();
      $(header_for_mobile).remove();
      return $(bottom_wrap).remove();
    };

    PushEvernote.prototype.filterHtml = function($) {
      var self;
      self = this;
      $("script").remove();
      $("*").map(function(i, elem) {
        var k, v, _ref, _results;
        _ref = elem.attribs;
        _results = [];
        for (k in _ref) {
          v = _ref[k];
          if (k !== 'style' && k !== "src" && k !== "href") {
            $(this).removeAttr(k);
          }
          if (k === 'href') {
            if (!self.checkUrl(v)) {
              _results.push($(this).removeAttr(k));
            } else {
              _results.push(void 0);
            }
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      });
      $("iframe").remove();
      $("article").each(function() {
        return $(this).replaceWith('<div>' + $(this).html() + '</div>');
      });
      $("section").each(function() {
        return $(this).replaceWith('<div>' + $(this).html() + '</div>');
      });
      $("header").each(function() {
        return $(this).replaceWith('<div>' + $(this).html() + '</div>');
      });
      $("noscript").each(function() {
        return $(this).replaceWith('<div>' + $(this).html() + '</div>');
      });
      $("figure").each(function() {
        return $(this).replaceWith('<div>' + $(this).html() + '</div>');
      });
      return $("figcaption").each(function() {
        return $(this).replaceWith('<div>' + $(this).html() + '</div>');
      });
    };

    PushEvernote.prototype.checkUrl = function(href) {
      var re, strRegex;
      strRegex = "^((https|http|ftp|rtsp|mms)?://)";
      +"?(([0-9a-z_!~*'().&=+$%-]+: )?[0-9a-z_!~*'().&=+$%-]+@)?";
      +"(([0-9]{1,3}/.){3}[0-9]{1,3}" + "|";
      +"([0-9a-z_!~*'()-]+/.)*";
      +"([0-9a-z][0-9a-z-]{0,61})?[0-9a-z]/.";
      +"[a-z]{2,6})";
      +"(:[0-9]{1,4})?";
      +"((/?)|";
      +"(/[0-9a-z_!~*'().;?:@&=+$,%#-]+)+/?)$";
      re = new RegExp(strRegex);
      if (re.test(href)) {
        return true;
      } else {
        return false;
      }
    };

    PushEvernote.prototype.readImgRes = function(imgUrl, cb) {
      var op, self;
      self = this;
      op = self.reqOp(imgUrl);
      op.encoding = 'binary';
      return async.auto({
        readImg: function(callback) {
          return request.get(op, function(err, res, body) {
            var mimeType;
            if (err) {
              return cb(err);
            }
            mimeType = res.headers['content-type'];
            mimeType = mimeType.split(';')[0];
            return callback(null, body, mimeType);
          });
        },
        enImg: [
          'readImg', function(callback, result) {
            var data, hash, image, mimeType, resource;
            mimeType = result.readImg[1];
            image = new Buffer(result.readImg[0], 'binary');
            hash = image.toString('base64');
            data = new Evernote.Data();
            data.size = image.length;
            data.bodyHash = hash;
            data.body = image;
            resource = new Evernote.Resource();
            resource.mime = mimeType;
            resource.data = data;
            resource.image = image;
            return cb(null, resource);
          }
        ]
      });
    };

    PushEvernote.prototype.reqOp = function(getUrl) {
      var options;
      options = {
        url: getUrl,
        headers: {
          'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/42.0.2311.90 Safari/537.36'
        }
      };
      return options;
    };

    return PushEvernote;

  })();

  module.exports = PushEvernote;

}).call(this);

//# sourceMappingURL=pushEvernote.js.map
