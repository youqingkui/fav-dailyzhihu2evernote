// Generated by CoffeeScript 1.8.0
(function() {
  var Daily, PushDaily, PushEvernote, async, noteStore, tx,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  PushEvernote = require('./pushEvernote');

  Daily = require('../models/daily');

  async = require('async');

  tx = require('./txErr');

  noteStore = require('./noteStore');

  PushDaily = (function(_super) {
    __extends(PushDaily, _super);

    function PushDaily(noteStore, noteBook, url, id, title) {
      this.noteStore = noteStore;
      this.noteBook = noteBook;
      this.url = url;
      this.id = id;
      this.title = title;
      PushDaily.__super__.constructor.apply(this, arguments);
    }

    PushDaily.prototype.changeStatus = function(cb) {
      var self;
      self = this;
      return async.waterfall([
        function(callback) {
          return Daily.findOne({
            href: self.id
          }, function(err, row) {
            if (err) {
              return tx({
                err: err,
                fun: 'changeStatus',
                id: self.id
              }, cb(err));
            }
            if (!row) {
              return tx({
                err: 'data not find',
                id: self.id
              }, cb("not find db"));
            }
            return callback(null, row);
          });
        }, function(row, callback) {
          row.status = 2;
          return row.save(function(err, res) {
            if (err) {
              return tx({
                err: err,
                id: self.id
              }, cb(err));
            }
            return cb();
          });
        }
      ]);
    };

    return PushDaily;

  })(PushEvernote);

  async.waterfall([
    function(cb) {
      return Daily.find({
        status: 0
      }, null, {
        sort: {
          _id: -1
        }
      }, function(err, rows) {
        var i, _i, _len;
        if (err) {
          return txErr(op.url, {
            err: err,
            fun: 'getList-find'
          });
        }
        for (_i = 0, _len = rows.length; _i < _len; _i++) {
          i = rows[_i];
          console.log(i);
        }
        return cb(null, rows);
      });
    }, function(tasks, cb) {
      return async.eachSeries(tasks, function(item, callback) {
        var p;
        p = new PushDaily(noteStore, 'af0137f4-89c6-4ad1-9bde-758bdcf378c1', item.url, item.href, item.title);
        return p.pushNote(callback);
      }, function() {
        console.log("all do");
        return console.log("all do");
      });
    }
  ]);

}).call(this);

//# sourceMappingURL=pushDaily.js.map
